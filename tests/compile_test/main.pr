let add(x: number, y: number) -> number =
    x + y

let sub(x: number, y: number) -> number =
    x - y

let mul(x: number, y: number) -> number =
    x * y

let div(x: number, y: number) -> number =
    x / y

let negated(x: number) -> number =
    -x

let apply_bin_op_fn(
    fn: (number, number) -> number,
    a: number,
    b: number
) -> number =
    fn(a, b)

let apply_unary_op_fn(fn: (number) -> number, a: number) -> number =
    fn(a)

let add_numbers(a: number, b: number) -> number =
    a + b

let returns_true() -> bool =
    true

let returns_false() -> bool =
    false

let returns_unit() -> # =
    #

let returns_unit_implicit() =
    #

let never_returns() -> ! =
    never_returns()

let apply_fn(fn: (number, number) -> number, a: number, b: number) -> number =
    fn(a, b)

let nt(
    a: number,
    b: number,
    c: bool,
    d: bool,
    e: number,
    f: #,
    g: #,
    h: !
) =
    #

let main() =
    nt(
        add_numbers(1, 2),
        add_numbers(1.0, 2.0),
        returns_true(),
        returns_false(),
        apply_fn(add_numbers, 1, 2),
        returns_unit(),
        returns_unit_implicit(),
        never_returns(),
    )
