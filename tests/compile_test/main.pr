let add(x: number, y: number) -> number =
    x + y

let sub(x: number, y: number) -> number =
    x - y

let mul(x: number, y: number) -> number =
    x * y

let div(x: number, y: number) -> number =
    x / y

let negated(x: number) -> number =
    -x

let apply_bin_op_fn(
    fn: (number, number) -> number,
    a: number,
    b: number
) -> number =
    fn(a, b)

let apply_unary_op_fn(fn: (number) -> number, a: number) -> number =
    fn(a)

let add_numbers(a: number, b: number) -> number =
    a + b

let never_returns(_: #) -> ! =
    never_returns(_)

let apply_fn(fn: (number, number) -> number, a: number, b: number) -> number =
    fn(a, b)

let nt(
    a: number,
    b: number,
    c: number,
    d: !
) =
    #

do nt(
    add_numbers(1, 2),
    add_numbers(1.0, 2.0),
    apply_fn(add_numbers, true, 2),
    never_returns(#),
)
